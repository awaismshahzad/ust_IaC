{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "InstanceType": {
        "Description": "Server instance type",
        "Type": "String",
        "AllowedValues": ["t2.micro", "t2.small"],
        "Default": "t2.micro",
        "ConstraintDescription": "Must be a valid EC2 instance type."
      },
      "KeyPair": {
        "Description": "Name of an existing EC2 KeyPair for SSH access",
        "Type": "AWS::EC2::KeyPair::KeyName"
      },
      "YourIp": {
        "Description": "Your public IP address in CIDR notation",
        "Type": "String"
      }
    },
    "Resources": {
      "EngineeringVpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.0.0.0/18",
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "Tags": [
            {
              "Key": "Name",
              "Value": "EngineeringVpc"
            }
          ]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {}
      },
      "VpcGatewayAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": { "Ref": "EngineeringVpc" },
          "InternetGatewayId": { "Ref": "InternetGateway" }
        }
      },
      "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": { "Ref": "EngineeringVpc" }
        }
      },
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": { "Ref": "PublicRouteTable" },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": { "Ref": "InternetGateway" }
        },
        "DependsOn": ["InternetGateway"]
      },
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": { "Ref": "EngineeringVpc" },
          "CidrBlock": "10.0.0.0/24",
          "MapPublicIpOnLaunch": "true",
          "AvailabilityZone": {
            "Fn::Select": ["0", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "PublicSubnet1"
            }
          ]
        }
      },
      "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": { "Ref": "EngineeringVpc" },
          "CidrBlock": "10.0.1.0/24",
          "MapPublicIpOnLaunch": "true",
          "AvailabilityZone": {
            "Fn::Select": ["1", { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "PublicSubnet2"
            }
          ]
        }
      },
      "PublicSubnet1RTAssoc": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": { "Ref": "PublicSubnet1" },
          "RouteTableId": { "Ref": "PublicRouteTable" }
        }
      },
      "PublicSubnet2RTAssoc": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": { "Ref": "PublicSubnet2" },
          "RouteTableId": { "Ref": "PublicRouteTable" }
        }
      },
      "WebserversSG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": { "Ref": "EngineeringVpc" },
          "GroupDescription": "Allow HTTP and SSH traffic",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": { "Ref": "YourIp" }
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"
            }
          ]
        }
      },
      "Web1": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": { "Ref": "InstanceType" },
          "ImageId": "ami-01cc34ab2709337aa",
          "SubnetId": { "Ref": "PublicSubnet1" },
          "SecurityGroupIds": [{ "Ref": "WebserversSG" }],
          "KeyName": { "Ref": "KeyPair" },
          "Tags": [
            { "Key": "Name", "Value": "web1" }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\n",
                  "yum update -y\n",
                  "yum install -y git httpd php\n",
                  "service httpd start\n",
                  "chkconfig httpd on\n",
                  "aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
                ]
              ]
            }
          }
        }
      },
      "Web2": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": { "Ref": "InstanceType" },
          "ImageId": "ami-01cc34ab2709337aa",
          "SubnetId": { "Ref": "PublicSubnet2" },
          "SecurityGroupIds": [{ "Ref": "WebserversSG" }],
          "KeyName": { "Ref": "KeyPair" },
          "Tags": [
            { "Key": "Name", "Value": "web2" }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\n",
                  "yum update -y\n",
                  "yum install -y git httpd php\n",
                  "service httpd start\n",
                  "chkconfig httpd on\n",
                  "aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
                ]
              ]
            }
          }
        }
      },
      "EngineeringLB": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Subnets": [
            { "Ref": "PublicSubnet1" },
            { "Ref": "PublicSubnet2" }
          ],
          "SecurityGroups": [{ "Ref": "WebserversSG" }]
        }
      },
      "EngineeringWebservers": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "VpcId": { "Ref": "EngineeringVpc" },
          "Port": 80,
          "Protocol": "HTTP",
          "TargetType": "instance",
          "HealthCheckProtocol": "HTTP",
          "HealthCheckPort": "80",
          "HealthCheckPath": "/"
        }
      },
      "ALBListener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "DefaultActions": [
            {
              "Type": "forward",
              "TargetGroupArn": { "Ref": "EngineeringWebservers" }
            }
          ],
          "LoadBalancerArn": { "Ref": "EngineeringLB" },
          "Port": "80",
          "Protocol": "HTTP"
        }
      }
    },
    "Outputs": {
      "WebUrl": {
        "Description": "The URL of the Engineering Load Balancer",
        "Value": { "Fn::GetAtt": ["EngineeringLB", "DNSName"] }
      }
    }
  }
  